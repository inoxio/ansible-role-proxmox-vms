---

- name: Do we destroy existing vm?
  ansible.builtin.shell: |
    qm stop {{ item.value.id }}
    qm destroy {{ item.value.id }}
  ignore_errors: true
  with_dict: "{{ vms }}"

- name: Check if deploy-args file exists
  stat:
    path: "{{ role_path }}/templates/deploy-args-{{ item.value.nix_type |
    default(proxmox_vms_defaults.nix_type) }}-{{ item.value.distribution |
    default(proxmox_vms_defaults.distribution) }}.j2"
  delegate_to: localhost
  become: false
  with_dict: "{{ vms }}"
  register: deploy_file_exists

- name: Make a bool list if deploy file exists for every vm
  set_fact:
    deploy_file_exists_list: "{{ deploy_file_exists_list | default({}) |
                              combine( {item.item.key: item.stat.exists} ) }}"
  with_items: "{{ deploy_file_exists.results }}"

- name: Check if preseed file exists
  stat:
    path: "{{ role_path }}/files/{{ item.value.nix_type }}-{{ item.value.distribution |
    default(proxmox_vms_defaults.distribution) }}.seed"
  delegate_to: localhost
  become: false
  with_dict: "{{ vms }}"
  register: preseed_file_exists

- name: Make a bool list if preseed file exists for every vm
  set_fact:
    preseed_file_exists_list: "{{ preseed_file_exists_list | default({}) |
                                  combine( {item.item.key: item.stat.exists} ) }}"
  with_items: "{{ preseed_file_exists.results }}"

- name: Make a distribution list for shorter statements
  set_fact:
    nix_types: "{{ nix_types | default({}) | combine( {item.key: item.value.nix_type |
                    default(proxmox_vms_defaults.nix_type)} ) }}"
    distributions: "{{ distributions | default({}) | combine( {item.key: item.value.distribution |
                    default(proxmox_vms_defaults.distribution)} ) }}"
    distributions_img: "{{ distributions_img | default({}) | combine( {item.key: item.value.distribution_img |
                    default(proxmox_vms_defaults.distribution_img)} ) }}"
    distributions_kernel_path: "{{ distributions_kernel_path | default({}) | combine( {item.key: item.value.distribution_kernel_path |
                    default(proxmox_vms_defaults.distribution_kernel_path)} ) }}"
    distributions_initrd_path: "{{ distributions_initrd_path | default({}) | combine( {item.key: item.value.distribution_initrd_path |
                    default(proxmox_vms_defaults.distribution_initrd_path)} ) }}"

  with_items: "{{ query('dict', vms) }}"

- name: Create virtual machines
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.value.node }}"
    name: "{{ item.key }}"
    net: "{{ item.value.net | default(proxmox_vms_defaults.net) }}"
    scsihw: "{{ item.value.scsihw | default(proxmox_vms_defaults.scsihw) }}"
    virtio: "{{ item.value.virtio | default(proxmox_vms_defaults.virtio) }}"
    cores: "{{ item.value.cores | default(proxmox_vms_defaults.cores) }}"
    sockets: "{{ item.value.sockets | default(proxmox_vms_defaults.sockets) }}"
    memory: "{{ item.value.memory_size | default(proxmox_vms_defaults.memory_size) }}"
    balloon: "{{ item.value.balloon | default(proxmox_vms_defaults.balloon) }}"
    vga: "qxl"
    ostype: "{{ item.value.ostype | default(proxmox_vms_defaults.ostype) }}"
    # Look for deploy-args-file of the vm and remove all newlines. If not found take the
    # template-file and remove all newlines (all commands in one line). See ansible filter documentation.
    args: "{{ lookup('template', 'deploy-args-'~nix_types[item.key]~'-'~distributions[item.key]~'.j2'
              if deploy_file_exists_list[item.key] else proxmox_vms_defaults.deploy_args_template) |
              replace('\n', '') }}"
    cpu: "{{ item.value.cpu | default(proxmox_vms_defaults.cpu) }}"
    onboot: "{{ item.value.onboot | default(proxmox_vms_defaults.onboot) }}"
    validate_certs: false
    state: present
  with_dict: "{{ vms }}"
  loop_control:
    pause: 10
  notify: sleep
  register: created_vms_pve

- meta: flush_handlers

- name: Create temporary directory for netboot image
  file:
    path: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}
    state: directory
    mode: 0755
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Download and unpack netboot image
  unarchive:
    src: "{{ distributions_img[item.item.key] }}"
    dest: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}
    remote_src: yes
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Move linux kernel file
  copy:
    src: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ distributions_kernel_path[item.item.key] }}
    dest: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}-kernel
    remote_src: yes
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Create temporary directory for initrd
  file:
    path: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ item.item.key }}-initrd
    state: directory
    mode: 0755
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Unpack initrd
  shell: zcat /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ distributions_initrd_path[item.item.key] }} | cpio -id
  args:
    chdir: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ item.item.key }}-initrd
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Copy preseed file
  copy:
    src: "{{ 'files/'~nix_types[item.item.key]~'-'~distributions[item.item.key]~'.seed' if preseed_file_exists_list[item.item.key]
    else proxmox_vms_defaults.preseed_template }}"
    dest: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ item.item.key }}-initrd/preseed.cfg
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Build post installation script
  template:
    src: templates/finish-installation.j2
    dest: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ item.item.key }}-initrd/finish-installation
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Repack initrd
  shell: find . | cpio --create --format='newc' | gzip > /tmp/{{ item.item.key }}-initrd.gz
  args:
    chdir: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}/{{ item.item.key }}-initrd
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Delete temporary directory
  file:
    state: absent
    path: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Start ubuntu setup
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.value.node }}"
    name: "{{ item.item.key }}"
    state: started
  with_items: "{{ created_vms_pve.results }}"
  notify: sleep
  when: item is changed

- meta: flush_handlers

- name: Run ubuntu setup only once
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.value.node }}"
    name: "{{ item.item.key }}"
    delete: args
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Wait for virtual machines to finish installation
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.value.node }}"
    name: "{{ item.item.key }}"
    state: current
  with_items: "{{ created_vms_pve.results }}"
  register: current_vm_state
  until: current_vm_state.status == "stopped"
  retries: 60
  delay: 10
  when: item is changed

- name: Restart vms
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.value.node }}"
    name: "{{ item.item.key }}"
    state: started
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Wait for virtual machines to finish rebooting
  wait_for:
    port: 22
    host: "{{ item.item.value.network.ip }}"
    search_regex: OpenSSH
    delay: 10
    timeout: 480
    msg: Timeout or polling failed.
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Delete initrd
  file:
    state: absent
    path: /tmp/{{ item.item.key }}-initrd.gz
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Delete kernel
  file:
    state: absent
    path: /tmp/{{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }}-kernel
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed

- name: Print success message
  debug:
    msg: "The installation of {{ nix_types[item.item.key] }}-{{ distributions[item.item.key] }} on {{ item.item.key }} was successful!"
  with_items: "{{ created_vms_pve.results }}"
  when: item is changed
